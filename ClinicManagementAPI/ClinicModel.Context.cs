//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicManagementAPI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CLINICEntities : DbContext
    {
        public CLINICEntities()
            : base("name=CLINICEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_ApmtDetails_Result> sp_ApmtDetails(Nullable<int> doctor_id, Nullable<int> patient_id, Nullable<System.DateTime> appointment_Date, string user_Type)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            var patient_idParameter = patient_id.HasValue ?
                new ObjectParameter("Patient_id", patient_id) :
                new ObjectParameter("Patient_id", typeof(int));
    
            var appointment_DateParameter = appointment_Date.HasValue ?
                new ObjectParameter("Appointment_Date", appointment_Date) :
                new ObjectParameter("Appointment_Date", typeof(System.DateTime));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ApmtDetails_Result>("sp_ApmtDetails", doctor_idParameter, patient_idParameter, appointment_DateParameter, user_TypeParameter);
        }
    
        public virtual ObjectResult<sp_ApmtHistory_Result> sp_ApmtHistory(Nullable<int> patient_id, string user_Type)
        {
            var patient_idParameter = patient_id.HasValue ?
                new ObjectParameter("Patient_id", patient_id) :
                new ObjectParameter("Patient_id", typeof(int));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ApmtHistory_Result>("sp_ApmtHistory", patient_idParameter, user_TypeParameter);
        }
    
        public virtual int sp_CancelApmt(Nullable<int> appointment_id, string user_Type)
        {
            var appointment_idParameter = appointment_id.HasValue ?
                new ObjectParameter("Appointment_id", appointment_id) :
                new ObjectParameter("Appointment_id", typeof(int));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CancelApmt", appointment_idParameter, user_TypeParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DelAcct(Nullable<int> account_id)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("Account_id", account_id) :
                new ObjectParameter("Account_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelAcct", account_idParameter);
        }
    
        public virtual int sp_DelApmt(Nullable<int> appointment_id)
        {
            var appointment_idParameter = appointment_id.HasValue ?
                new ObjectParameter("Appointment_id", appointment_id) :
                new ObjectParameter("Appointment_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelApmt", appointment_idParameter);
        }
    
        public virtual int sp_DelDoc(Nullable<int> doctor_id)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelDoc", doctor_idParameter);
        }
    
        public virtual int sp_DelPat(Nullable<int> patient_id)
        {
            var patient_idParameter = patient_id.HasValue ?
                new ObjectParameter("Patient_id", patient_id) :
                new ObjectParameter("Patient_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelPat", patient_idParameter);
        }
    
        public virtual ObjectResult<sp_DocAvailability_Result> sp_DocAvailability(Nullable<int> doctor_id, Nullable<System.DateTime> start_Time, Nullable<System.DateTime> end_Time, Nullable<System.DateTime> date, string user_Type, string availability_Condition)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            var start_TimeParameter = start_Time.HasValue ?
                new ObjectParameter("Start_Time", start_Time) :
                new ObjectParameter("Start_Time", typeof(System.DateTime));
    
            var end_TimeParameter = end_Time.HasValue ?
                new ObjectParameter("End_Time", end_Time) :
                new ObjectParameter("End_Time", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            var availability_ConditionParameter = availability_Condition != null ?
                new ObjectParameter("Availability_Condition", availability_Condition) :
                new ObjectParameter("Availability_Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DocAvailability_Result>("sp_DocAvailability", doctor_idParameter, start_TimeParameter, end_TimeParameter, dateParameter, user_TypeParameter, availability_ConditionParameter);
        }
    
        public virtual ObjectResult<sp_DocExceed6Hour_Result> sp_DocExceed6Hour(Nullable<System.DateTime> date, string user_Type)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DocExceed6Hour_Result>("sp_DocExceed6Hour", dateParameter, user_TypeParameter);
        }
    
        public virtual ObjectResult<sp_DoctorSchedule_Result> sp_DoctorSchedule(Nullable<int> doctor_id, Nullable<System.DateTime> appointment_Date, string user_Type)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            var appointment_DateParameter = appointment_Date.HasValue ?
                new ObjectParameter("Appointment_Date", appointment_Date) :
                new ObjectParameter("Appointment_Date", typeof(System.DateTime));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DoctorSchedule_Result>("sp_DoctorSchedule", doctor_idParameter, appointment_DateParameter, user_TypeParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_InsAcct(string account_Username, string account_Password, string account_Email, string account_Mobile, string account_Type, string account_Status)
        {
            var account_UsernameParameter = account_Username != null ?
                new ObjectParameter("Account_Username", account_Username) :
                new ObjectParameter("Account_Username", typeof(string));
    
            var account_PasswordParameter = account_Password != null ?
                new ObjectParameter("Account_Password", account_Password) :
                new ObjectParameter("Account_Password", typeof(string));
    
            var account_EmailParameter = account_Email != null ?
                new ObjectParameter("Account_Email", account_Email) :
                new ObjectParameter("Account_Email", typeof(string));
    
            var account_MobileParameter = account_Mobile != null ?
                new ObjectParameter("Account_Mobile", account_Mobile) :
                new ObjectParameter("Account_Mobile", typeof(string));
    
            var account_TypeParameter = account_Type != null ?
                new ObjectParameter("Account_Type", account_Type) :
                new ObjectParameter("Account_Type", typeof(string));
    
            var account_StatusParameter = account_Status != null ?
                new ObjectParameter("Account_Status", account_Status) :
                new ObjectParameter("Account_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsAcct", account_UsernameParameter, account_PasswordParameter, account_EmailParameter, account_MobileParameter, account_TypeParameter, account_StatusParameter);
        }
    
        public virtual int sp_InsApmt(Nullable<System.DateTime> appointment_Date, Nullable<System.DateTime> appointment_Time, Nullable<int> appointment_Duration, string appointment_Status, Nullable<int> appointment_PatientId, Nullable<int> appointment_DoctorId, string appointment_CreatedBy, Nullable<System.DateTime> appointment_CreatedTime)
        {
            var appointment_DateParameter = appointment_Date.HasValue ?
                new ObjectParameter("Appointment_Date", appointment_Date) :
                new ObjectParameter("Appointment_Date", typeof(System.DateTime));
    
            var appointment_TimeParameter = appointment_Time.HasValue ?
                new ObjectParameter("Appointment_Time", appointment_Time) :
                new ObjectParameter("Appointment_Time", typeof(System.DateTime));
    
            var appointment_DurationParameter = appointment_Duration.HasValue ?
                new ObjectParameter("Appointment_Duration", appointment_Duration) :
                new ObjectParameter("Appointment_Duration", typeof(int));
    
            var appointment_StatusParameter = appointment_Status != null ?
                new ObjectParameter("Appointment_Status", appointment_Status) :
                new ObjectParameter("Appointment_Status", typeof(string));
    
            var appointment_PatientIdParameter = appointment_PatientId.HasValue ?
                new ObjectParameter("Appointment_PatientId", appointment_PatientId) :
                new ObjectParameter("Appointment_PatientId", typeof(int));
    
            var appointment_DoctorIdParameter = appointment_DoctorId.HasValue ?
                new ObjectParameter("Appointment_DoctorId", appointment_DoctorId) :
                new ObjectParameter("Appointment_DoctorId", typeof(int));
    
            var appointment_CreatedByParameter = appointment_CreatedBy != null ?
                new ObjectParameter("Appointment_CreatedBy", appointment_CreatedBy) :
                new ObjectParameter("Appointment_CreatedBy", typeof(string));
    
            var appointment_CreatedTimeParameter = appointment_CreatedTime.HasValue ?
                new ObjectParameter("Appointment_CreatedTime", appointment_CreatedTime) :
                new ObjectParameter("Appointment_CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsApmt", appointment_DateParameter, appointment_TimeParameter, appointment_DurationParameter, appointment_StatusParameter, appointment_PatientIdParameter, appointment_DoctorIdParameter, appointment_CreatedByParameter, appointment_CreatedTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsApmtByPat(Nullable<int> doctor_id, Nullable<System.DateTime> newAppointment_Date, Nullable<System.DateTime> newAppointment_Time, Nullable<int> patient_id)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            var newAppointment_DateParameter = newAppointment_Date.HasValue ?
                new ObjectParameter("NewAppointment_Date", newAppointment_Date) :
                new ObjectParameter("NewAppointment_Date", typeof(System.DateTime));
    
            var newAppointment_TimeParameter = newAppointment_Time.HasValue ?
                new ObjectParameter("NewAppointment_Time", newAppointment_Time) :
                new ObjectParameter("NewAppointment_Time", typeof(System.DateTime));
    
            var patient_idParameter = patient_id.HasValue ?
                new ObjectParameter("Patient_id", patient_id) :
                new ObjectParameter("Patient_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsApmtByPat", doctor_idParameter, newAppointment_DateParameter, newAppointment_TimeParameter, patient_idParameter);
        }
    
        public virtual int sp_InsDoc(string doctor_FirstName, string doctor_LastName, string doctor_Gender, string doctor_Specialization, string doctor_Mobile, string doctor_Email, string doctor_Address)
        {
            var doctor_FirstNameParameter = doctor_FirstName != null ?
                new ObjectParameter("Doctor_FirstName", doctor_FirstName) :
                new ObjectParameter("Doctor_FirstName", typeof(string));
    
            var doctor_LastNameParameter = doctor_LastName != null ?
                new ObjectParameter("Doctor_LastName", doctor_LastName) :
                new ObjectParameter("Doctor_LastName", typeof(string));
    
            var doctor_GenderParameter = doctor_Gender != null ?
                new ObjectParameter("Doctor_Gender", doctor_Gender) :
                new ObjectParameter("Doctor_Gender", typeof(string));
    
            var doctor_SpecializationParameter = doctor_Specialization != null ?
                new ObjectParameter("Doctor_Specialization", doctor_Specialization) :
                new ObjectParameter("Doctor_Specialization", typeof(string));
    
            var doctor_MobileParameter = doctor_Mobile != null ?
                new ObjectParameter("Doctor_Mobile", doctor_Mobile) :
                new ObjectParameter("Doctor_Mobile", typeof(string));
    
            var doctor_EmailParameter = doctor_Email != null ?
                new ObjectParameter("Doctor_Email", doctor_Email) :
                new ObjectParameter("Doctor_Email", typeof(string));
    
            var doctor_AddressParameter = doctor_Address != null ?
                new ObjectParameter("Doctor_Address", doctor_Address) :
                new ObjectParameter("Doctor_Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsDoc", doctor_FirstNameParameter, doctor_LastNameParameter, doctor_GenderParameter, doctor_SpecializationParameter, doctor_MobileParameter, doctor_EmailParameter, doctor_AddressParameter);
        }
    
        public virtual int sp_InsPat(string patient_FirstName, string patient_LastName, string patient_Gender, string patient_Mobile, string patient_Email, string patient_Address)
        {
            var patient_FirstNameParameter = patient_FirstName != null ?
                new ObjectParameter("Patient_FirstName", patient_FirstName) :
                new ObjectParameter("Patient_FirstName", typeof(string));
    
            var patient_LastNameParameter = patient_LastName != null ?
                new ObjectParameter("Patient_LastName", patient_LastName) :
                new ObjectParameter("Patient_LastName", typeof(string));
    
            var patient_GenderParameter = patient_Gender != null ?
                new ObjectParameter("Patient_Gender", patient_Gender) :
                new ObjectParameter("Patient_Gender", typeof(string));
    
            var patient_MobileParameter = patient_Mobile != null ?
                new ObjectParameter("Patient_Mobile", patient_Mobile) :
                new ObjectParameter("Patient_Mobile", typeof(string));
    
            var patient_EmailParameter = patient_Email != null ?
                new ObjectParameter("Patient_Email", patient_Email) :
                new ObjectParameter("Patient_Email", typeof(string));
    
            var patient_AddressParameter = patient_Address != null ?
                new ObjectParameter("Patient_Address", patient_Address) :
                new ObjectParameter("Patient_Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsPat", patient_FirstNameParameter, patient_LastNameParameter, patient_GenderParameter, patient_MobileParameter, patient_EmailParameter, patient_AddressParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsSession(string session_AppId, string session_UserName, Nullable<System.DateTime> session_StartTime, Nullable<System.DateTime> session_LastActivityTime, Nullable<bool> session_IsTerminated, Nullable<bool> session_IsKilled, string session_IPAddress, string session_HostName, Nullable<int> session_VersionNo, string session_TransactionId, string session_CreatedBy, Nullable<System.DateTime> session_CreatedTime, string session_LastUpdatedBy, Nullable<System.DateTime> session_LastUpdatedTime, string username, string password)
        {
            var session_AppIdParameter = session_AppId != null ?
                new ObjectParameter("Session_AppId", session_AppId) :
                new ObjectParameter("Session_AppId", typeof(string));
    
            var session_UserNameParameter = session_UserName != null ?
                new ObjectParameter("Session_UserName", session_UserName) :
                new ObjectParameter("Session_UserName", typeof(string));
    
            var session_StartTimeParameter = session_StartTime.HasValue ?
                new ObjectParameter("Session_StartTime", session_StartTime) :
                new ObjectParameter("Session_StartTime", typeof(System.DateTime));
    
            var session_LastActivityTimeParameter = session_LastActivityTime.HasValue ?
                new ObjectParameter("Session_LastActivityTime", session_LastActivityTime) :
                new ObjectParameter("Session_LastActivityTime", typeof(System.DateTime));
    
            var session_IsTerminatedParameter = session_IsTerminated.HasValue ?
                new ObjectParameter("Session_IsTerminated", session_IsTerminated) :
                new ObjectParameter("Session_IsTerminated", typeof(bool));
    
            var session_IsKilledParameter = session_IsKilled.HasValue ?
                new ObjectParameter("Session_IsKilled", session_IsKilled) :
                new ObjectParameter("Session_IsKilled", typeof(bool));
    
            var session_IPAddressParameter = session_IPAddress != null ?
                new ObjectParameter("Session_IPAddress", session_IPAddress) :
                new ObjectParameter("Session_IPAddress", typeof(string));
    
            var session_HostNameParameter = session_HostName != null ?
                new ObjectParameter("Session_HostName", session_HostName) :
                new ObjectParameter("Session_HostName", typeof(string));
    
            var session_VersionNoParameter = session_VersionNo.HasValue ?
                new ObjectParameter("Session_VersionNo", session_VersionNo) :
                new ObjectParameter("Session_VersionNo", typeof(int));
    
            var session_TransactionIdParameter = session_TransactionId != null ?
                new ObjectParameter("Session_TransactionId", session_TransactionId) :
                new ObjectParameter("Session_TransactionId", typeof(string));
    
            var session_CreatedByParameter = session_CreatedBy != null ?
                new ObjectParameter("Session_CreatedBy", session_CreatedBy) :
                new ObjectParameter("Session_CreatedBy", typeof(string));
    
            var session_CreatedTimeParameter = session_CreatedTime.HasValue ?
                new ObjectParameter("Session_CreatedTime", session_CreatedTime) :
                new ObjectParameter("Session_CreatedTime", typeof(System.DateTime));
    
            var session_LastUpdatedByParameter = session_LastUpdatedBy != null ?
                new ObjectParameter("Session_LastUpdatedBy", session_LastUpdatedBy) :
                new ObjectParameter("Session_LastUpdatedBy", typeof(string));
    
            var session_LastUpdatedTimeParameter = session_LastUpdatedTime.HasValue ?
                new ObjectParameter("Session_LastUpdatedTime", session_LastUpdatedTime) :
                new ObjectParameter("Session_LastUpdatedTime", typeof(System.DateTime));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsSession", session_AppIdParameter, session_UserNameParameter, session_StartTimeParameter, session_LastActivityTimeParameter, session_IsTerminatedParameter, session_IsKilledParameter, session_IPAddressParameter, session_HostNameParameter, session_VersionNoParameter, session_TransactionIdParameter, session_CreatedByParameter, session_CreatedTimeParameter, session_LastUpdatedByParameter, session_LastUpdatedTimeParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_MaxDocAppointments_Result> sp_MaxDocAppointments(Nullable<System.DateTime> date, string user_Type)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var user_TypeParameter = user_Type != null ?
                new ObjectParameter("User_Type", user_Type) :
                new ObjectParameter("User_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MaxDocAppointments_Result>("sp_MaxDocAppointments", dateParameter, user_TypeParameter);
        }
    
        public virtual int sp_registerAcct(string account_Username, string account_Password, string account_Email, string account_Mobile, string account_Type)
        {
            var account_UsernameParameter = account_Username != null ?
                new ObjectParameter("Account_Username", account_Username) :
                new ObjectParameter("Account_Username", typeof(string));
    
            var account_PasswordParameter = account_Password != null ?
                new ObjectParameter("Account_Password", account_Password) :
                new ObjectParameter("Account_Password", typeof(string));
    
            var account_EmailParameter = account_Email != null ?
                new ObjectParameter("Account_Email", account_Email) :
                new ObjectParameter("Account_Email", typeof(string));
    
            var account_MobileParameter = account_Mobile != null ?
                new ObjectParameter("Account_Mobile", account_Mobile) :
                new ObjectParameter("Account_Mobile", typeof(string));
    
            var account_TypeParameter = account_Type != null ?
                new ObjectParameter("Account_Type", account_Type) :
                new ObjectParameter("Account_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_registerAcct", account_UsernameParameter, account_PasswordParameter, account_EmailParameter, account_MobileParameter, account_TypeParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_UpdAcct(Nullable<int> account_id, string account_Username, string account_Password, string account_Email, string account_Mobile, string account_Type, Nullable<System.DateTime> account_CreatedAt, string account_Status)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("Account_id", account_id) :
                new ObjectParameter("Account_id", typeof(int));
    
            var account_UsernameParameter = account_Username != null ?
                new ObjectParameter("Account_Username", account_Username) :
                new ObjectParameter("Account_Username", typeof(string));
    
            var account_PasswordParameter = account_Password != null ?
                new ObjectParameter("Account_Password", account_Password) :
                new ObjectParameter("Account_Password", typeof(string));
    
            var account_EmailParameter = account_Email != null ?
                new ObjectParameter("Account_Email", account_Email) :
                new ObjectParameter("Account_Email", typeof(string));
    
            var account_MobileParameter = account_Mobile != null ?
                new ObjectParameter("Account_Mobile", account_Mobile) :
                new ObjectParameter("Account_Mobile", typeof(string));
    
            var account_TypeParameter = account_Type != null ?
                new ObjectParameter("Account_Type", account_Type) :
                new ObjectParameter("Account_Type", typeof(string));
    
            var account_CreatedAtParameter = account_CreatedAt.HasValue ?
                new ObjectParameter("Account_CreatedAt", account_CreatedAt) :
                new ObjectParameter("Account_CreatedAt", typeof(System.DateTime));
    
            var account_StatusParameter = account_Status != null ?
                new ObjectParameter("Account_Status", account_Status) :
                new ObjectParameter("Account_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdAcct", account_idParameter, account_UsernameParameter, account_PasswordParameter, account_EmailParameter, account_MobileParameter, account_TypeParameter, account_CreatedAtParameter, account_StatusParameter);
        }
    
        public virtual int sp_UpdApmt(Nullable<int> appointment_id, Nullable<System.DateTime> appointment_Date, Nullable<System.DateTime> appointment_Time, Nullable<int> appointment_Duration, string appointment_Status, Nullable<int> appointment_PatientId, Nullable<int> appointment_DoctorId, string appointment_CreatedBy, Nullable<System.DateTime> appointment_CreatedTime)
        {
            var appointment_idParameter = appointment_id.HasValue ?
                new ObjectParameter("Appointment_id", appointment_id) :
                new ObjectParameter("Appointment_id", typeof(int));
    
            var appointment_DateParameter = appointment_Date.HasValue ?
                new ObjectParameter("Appointment_Date", appointment_Date) :
                new ObjectParameter("Appointment_Date", typeof(System.DateTime));
    
            var appointment_TimeParameter = appointment_Time.HasValue ?
                new ObjectParameter("Appointment_Time", appointment_Time) :
                new ObjectParameter("Appointment_Time", typeof(System.DateTime));
    
            var appointment_DurationParameter = appointment_Duration.HasValue ?
                new ObjectParameter("Appointment_Duration", appointment_Duration) :
                new ObjectParameter("Appointment_Duration", typeof(int));
    
            var appointment_StatusParameter = appointment_Status != null ?
                new ObjectParameter("Appointment_Status", appointment_Status) :
                new ObjectParameter("Appointment_Status", typeof(string));
    
            var appointment_PatientIdParameter = appointment_PatientId.HasValue ?
                new ObjectParameter("Appointment_PatientId", appointment_PatientId) :
                new ObjectParameter("Appointment_PatientId", typeof(int));
    
            var appointment_DoctorIdParameter = appointment_DoctorId.HasValue ?
                new ObjectParameter("Appointment_DoctorId", appointment_DoctorId) :
                new ObjectParameter("Appointment_DoctorId", typeof(int));
    
            var appointment_CreatedByParameter = appointment_CreatedBy != null ?
                new ObjectParameter("Appointment_CreatedBy", appointment_CreatedBy) :
                new ObjectParameter("Appointment_CreatedBy", typeof(string));
    
            var appointment_CreatedTimeParameter = appointment_CreatedTime.HasValue ?
                new ObjectParameter("Appointment_CreatedTime", appointment_CreatedTime) :
                new ObjectParameter("Appointment_CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdApmt", appointment_idParameter, appointment_DateParameter, appointment_TimeParameter, appointment_DurationParameter, appointment_StatusParameter, appointment_PatientIdParameter, appointment_DoctorIdParameter, appointment_CreatedByParameter, appointment_CreatedTimeParameter);
        }
    
        public virtual int sp_UpdDoc(Nullable<int> doctor_id, string doctor_FirstName, string doctor_LastName, string doctor_Gender, string doctor_Specialization, string doctor_Mobile, string doctor_Email, string doctor_Address)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            var doctor_FirstNameParameter = doctor_FirstName != null ?
                new ObjectParameter("Doctor_FirstName", doctor_FirstName) :
                new ObjectParameter("Doctor_FirstName", typeof(string));
    
            var doctor_LastNameParameter = doctor_LastName != null ?
                new ObjectParameter("Doctor_LastName", doctor_LastName) :
                new ObjectParameter("Doctor_LastName", typeof(string));
    
            var doctor_GenderParameter = doctor_Gender != null ?
                new ObjectParameter("Doctor_Gender", doctor_Gender) :
                new ObjectParameter("Doctor_Gender", typeof(string));
    
            var doctor_SpecializationParameter = doctor_Specialization != null ?
                new ObjectParameter("Doctor_Specialization", doctor_Specialization) :
                new ObjectParameter("Doctor_Specialization", typeof(string));
    
            var doctor_MobileParameter = doctor_Mobile != null ?
                new ObjectParameter("Doctor_Mobile", doctor_Mobile) :
                new ObjectParameter("Doctor_Mobile", typeof(string));
    
            var doctor_EmailParameter = doctor_Email != null ?
                new ObjectParameter("Doctor_Email", doctor_Email) :
                new ObjectParameter("Doctor_Email", typeof(string));
    
            var doctor_AddressParameter = doctor_Address != null ?
                new ObjectParameter("Doctor_Address", doctor_Address) :
                new ObjectParameter("Doctor_Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdDoc", doctor_idParameter, doctor_FirstNameParameter, doctor_LastNameParameter, doctor_GenderParameter, doctor_SpecializationParameter, doctor_MobileParameter, doctor_EmailParameter, doctor_AddressParameter);
        }
    
        public virtual int sp_UpdPat(Nullable<int> patient_id, string patient_FirstName, string patient_LastName, string patient_Gender, string patient_Mobile, string patient_Email, string patient_Address)
        {
            var patient_idParameter = patient_id.HasValue ?
                new ObjectParameter("Patient_id", patient_id) :
                new ObjectParameter("Patient_id", typeof(int));
    
            var patient_FirstNameParameter = patient_FirstName != null ?
                new ObjectParameter("Patient_FirstName", patient_FirstName) :
                new ObjectParameter("Patient_FirstName", typeof(string));
    
            var patient_LastNameParameter = patient_LastName != null ?
                new ObjectParameter("Patient_LastName", patient_LastName) :
                new ObjectParameter("Patient_LastName", typeof(string));
    
            var patient_GenderParameter = patient_Gender != null ?
                new ObjectParameter("Patient_Gender", patient_Gender) :
                new ObjectParameter("Patient_Gender", typeof(string));
    
            var patient_MobileParameter = patient_Mobile != null ?
                new ObjectParameter("Patient_Mobile", patient_Mobile) :
                new ObjectParameter("Patient_Mobile", typeof(string));
    
            var patient_EmailParameter = patient_Email != null ?
                new ObjectParameter("Patient_Email", patient_Email) :
                new ObjectParameter("Patient_Email", typeof(string));
    
            var patient_AddressParameter = patient_Address != null ?
                new ObjectParameter("Patient_Address", patient_Address) :
                new ObjectParameter("Patient_Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdPat", patient_idParameter, patient_FirstNameParameter, patient_LastNameParameter, patient_GenderParameter, patient_MobileParameter, patient_EmailParameter, patient_AddressParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_ViewAcctById_Result> sp_ViewAcctById(Nullable<int> account_id)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("Account_id", account_id) :
                new ObjectParameter("Account_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewAcctById_Result>("sp_ViewAcctById", account_idParameter);
        }
    
        public virtual ObjectResult<sp_ViewAcctTab_Result> sp_ViewAcctTab()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewAcctTab_Result>("sp_ViewAcctTab");
        }
    
        public virtual ObjectResult<sp_ViewApmtById_Result> sp_ViewApmtById(Nullable<int> appointment_id)
        {
            var appointment_idParameter = appointment_id.HasValue ?
                new ObjectParameter("Appointment_id", appointment_id) :
                new ObjectParameter("Appointment_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewApmtById_Result>("sp_ViewApmtById", appointment_idParameter);
        }
    
        public virtual ObjectResult<sp_ViewApmtTab_Result> sp_ViewApmtTab()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewApmtTab_Result>("sp_ViewApmtTab");
        }
    
        public virtual ObjectResult<sp_ViewDocById_Result> sp_ViewDocById(Nullable<int> doctor_id)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewDocById_Result>("sp_ViewDocById", doctor_idParameter);
        }
    
        public virtual ObjectResult<sp_ViewDocTab_Result> sp_ViewDocTab()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewDocTab_Result>("sp_ViewDocTab");
        }
    
        public virtual ObjectResult<sp_ViewPatById_Result> sp_ViewPatById(Nullable<int> patient_id)
        {
            var patient_idParameter = patient_id.HasValue ?
                new ObjectParameter("Patient_id", patient_id) :
                new ObjectParameter("Patient_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewPatById_Result>("sp_ViewPatById", patient_idParameter);
        }
    
        public virtual ObjectResult<sp_ViewPatTab_Result> sp_ViewPatTab()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewPatTab_Result>("sp_ViewPatTab");
        }
    
        public virtual ObjectResult<sp_DocAvailableSlots_Result> sp_DocAvailableSlots(Nullable<int> doctor_id)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DocAvailableSlots_Result>("sp_DocAvailableSlots", doctor_idParameter);
        }
    
        public virtual ObjectResult<sp_DocAvailableSlotsById_Result> sp_DocAvailableSlotsById(Nullable<int> doctor_id)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DocAvailableSlotsById_Result>("sp_DocAvailableSlotsById", doctor_idParameter);
        }
    }
}
